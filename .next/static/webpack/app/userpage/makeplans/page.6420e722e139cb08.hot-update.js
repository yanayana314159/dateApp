"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/userpage/makeplans/page",{

/***/ "(app-pages-browser)/./app/components/calculateFreeTime.tsx":
/*!**********************************************!*\
  !*** ./app/components/calculateFreeTime.tsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ calculateFreeTime; }\n/* harmony export */ });\nfunction calculateFreeTime(events) {\n    // 取得したカレンダーから空き時間を2進数形式で抽出\n    const bitEmptyTimeOfDays = calculateEmptyTimeOfDays(events);\n    // Date形式に戻す\n    const emptyTimeOfDays = changeBitToDate(bitEmptyTimeOfDays);\n    // 出力\n    const freeTime = displayDays(emptyTimeOfDays);\n    return freeTime;\n// 日毎に、空き時間が「10:00-11:30,14:15-15:45」のような形式で出力される\n}\n/**\n * 空き日程をbit形式で返却\n */ function calculateEmptyTimeOfDays(events) {\n    const bitDays = [];\n    events.map((event)=>{\n        const bitDay = changeDateToBit(event);\n        const { key, value } = bitDay;\n        if (bitDays[key] !== undefined) {\n            // 論理和を取る\n            // 追記：BigInt型にキャストして演算を行う\n            bitDays[key] = \"0b\" + (BigInt(bitDays[key]) | BigInt(value)).toString(2).padStart(56, \"0\");\n        } else {\n            bitDays[key] = value;\n        }\n    });\n    return bitDays;\n}\n/**\n * bit形式に変換\n * @return {\"key\": key, \"value\": value}, key = 日付, value = bit\n * bit定義 → 15分区切りで表現、0 = 予定なし、1 = 予定あり\n * 例（_は実際には含まれない）：11:00-12:15予定あり → 「0000_0000_1111_1000_0000_0000_0000_0000_0000_0000_0000」\n * 4 * 11 = 44bit→56bit\n */ function changeDateToBit(event) {\n    const start = event.start;\n    const end = event.end;\n    // 対象の時間\n    const clockIn = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 9, 0);\n    const clockOut = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 23, 0);\n    let dateBit = \"0b\";\n    let checkDuration = new Date(clockIn);\n    for(let i = 0; i < 56; i++){\n        if (start <= checkDuration && checkDuration < end) {\n            dateBit += \"1\";\n        } else {\n            dateBit += \"0\";\n        }\n        if (checkDuration >= clockOut) {\n            break;\n        }\n        checkDuration.setMinutes(checkDuration.getMinutes() + 15);\n    }\n    const dateKey = getDateLabel(start);\n    return {\n        key: dateKey,\n        value: dateBit\n    };\n}\n/**\n * Bit形式の日付をDate型に戻す\n * @return {<日付> : {\"start\": <日時>, \"end\": <日時>}[]}[]\n */ function changeBitToDate(bitDays) {\n    const freeTimes = {};\n    Object.keys(bitDays).forEach((key)=>{\n        // 先頭の「0b」除去\n        const dateBit = bitDays[key].replace(/^0b/, \"\");\n        // 範囲の始点を設定\n        const clockIn = new Date(key);\n        clockIn.setHours(9);\n        clockIn.setMinutes(0);\n        let start;\n        let end;\n        const freeDurations = [];\n        for(let i = 0; i < dateBit.length; i++){\n            const bit = dateBit.charAt(i);\n            if (!start) {\n                if (bit === \"0\") {\n                    start = new Date(clockIn);\n                    start.setMinutes(start.getMinutes() + 15 * i);\n                }\n            } else {\n                if (bit === \"1\" || i === dateBit.length - 1) {\n                    if (bit === \"1\") {\n                        end = new Date(clockIn);\n                        end.setMinutes(end.getMinutes() + 15 * i);\n                    } else {\n                        end = new Date(clockIn);\n                        end.setMinutes(end.getMinutes() + 15 * (i + 1));\n                    }\n                    freeDurations.push({\n                        start: getDateTimeLabel(start),\n                        end: getDateTimeLabel(end)\n                    });\n                    // リセット\n                    start = undefined;\n                    end = undefined;\n                }\n            }\n        }\n        freeTimes[key] = freeDurations;\n    });\n    return freeTimes;\n}\n/**\n * 日時をシートに表示\n * @param days {<日付> : {\"start\": <日時>, \"end\": <日時>}[]}[]\n */ function displayDays(days) {\n    const freeTime = [];\n    Object.keys(days).forEach((key, i)=>{\n        let value = \"\";\n        days[key].forEach((e)=>{\n            value += \"\".concat(e.start, \"-\").concat(e.end, \"\\n\") + \"\";\n        });\n        // 出力\n        freeTime.push(value.slice(0, -1));\n    });\n    return freeTime;\n}\n/**\n * YYYY/MM/DDを返す\n */ function getDateLabel(date) {\n    return \"\".concat(date.getFullYear(), \"/\").concat((\"0\" + (date.getMonth() + 1)).slice(-2), \"/\").concat((\"0\" + date.getDate()).slice(-2));\n}\n/**\n * hh:mmを返す\n */ function getTimeLabel(date) {\n    return \"\".concat((\"0\" + date.getHours()).slice(-2), \":\").concat((\"0\" + date.getMinutes()).slice(-2));\n}\n/**\n * YYYY/MM/DD hh:mmを返す\n */ function getDateTimeLabel(date) {\n    return \"\".concat(date.getFullYear(), \"/\").concat((\"0\" + (date.getMonth() + 1)).slice(-2), \"/\").concat((\"0\" + date.getDate()).slice(-2), \" \").concat((\"0\" + date.getHours()).slice(-2), \":\").concat((\"0\" + date.getMinutes()).slice(-2));\n}\nfunction test(events) {\n    const bitDays = [];\n    events.map((e)=>{\n        const bitDay = changeDateToBit(e);\n        const { key, value } = bitDay;\n        if (bitDays[key] !== undefined) {\n            // 論理和を取る！\n            // 追記：BigInt型にキャストして演算を行う\n            bitDays[key] = \"0b\" + (BigInt(bitDays[key]) | BigInt(value)).toString(2).padStart(56, \"0\");\n        } else {\n            bitDays[key] = value;\n        }\n    });\n    return bitDays;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/calculateFreeTime.tsx\n"));

/***/ })

});