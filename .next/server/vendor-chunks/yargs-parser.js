"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/yargs-parser";
exports.ids = ["vendor-chunks/yargs-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/yargs-parser/build/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/yargs-parser/build/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var _string_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./string-utils.js */ \"(rsc)/./node_modules/yargs-parser/build/lib/string-utils.js\");\n/* harmony import */ var _yargs_parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./yargs-parser.js */ \"(rsc)/./node_modules/yargs-parser/build/lib/yargs-parser.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */ var _a, _b, _c;\n\n\n\n\n\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new _yargs_parser_js__WEBPACK_IMPORTED_MODULE_3__.YargsParser({\n    cwd: process.cwd,\n    env: ()=>{\n        return env;\n    },\n    format: util__WEBPACK_IMPORTED_MODULE_0__.format,\n    normalize: path__WEBPACK_IMPORTED_MODULE_1__.normalize,\n    resolve: path__WEBPACK_IMPORTED_MODULE_1__.resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path)=>{\n        if (typeof require !== \"undefined\") {\n            return require(path);\n        } else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse((0,fs__WEBPACK_IMPORTED_MODULE_4__.readFileSync)(path, \"utf8\"));\n        } else {\n            throw Error(\"only .json config files are supported in ESM\");\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function(args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = _string_utils_js__WEBPACK_IMPORTED_MODULE_2__.camelCase;\nyargsParser.decamelize = _string_utils_js__WEBPACK_IMPORTED_MODULE_2__.decamelize;\nyargsParser.looksLikeNumber = _string_utils_js__WEBPACK_IMPORTED_MODULE_2__.looksLikeNumber;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (yargsParser);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveWFyZ3MtcGFyc2VyL2J1aWxkL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBQ0QsSUFBSUEsSUFBSUMsSUFBSUM7QUFDa0I7QUFDWTtBQUNpQztBQUMzQjtBQUNkO0FBQ2xDLDhFQUE4RTtBQUM5RSwrRUFBK0U7QUFDL0UsTUFBTVMsaUJBQWlCLFdBQVlDLFFBQVFDLEdBQUcsSUFBSUQsUUFBUUMsR0FBRyxDQUFDQyxzQkFBc0IsR0FDOUVDLE9BQU9ILFFBQVFDLEdBQUcsQ0FBQ0Msc0JBQXNCLElBQ3pDO0FBQ04sTUFBTUUsY0FBYyxDQUFDZixLQUFLLENBQUNELEtBQUtZLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRSyxRQUFRLE1BQU0sUUFBUWpCLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR2tCLElBQUksTUFBTSxRQUFRakIsT0FBTyxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsS0FBS1UsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFPLE9BQU8sTUFBTSxRQUFRakIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHa0IsS0FBSyxDQUFDO0FBQzFTLElBQUlKLGFBQWE7SUFDYixNQUFNSyxRQUFRTixPQUFPQyxZQUFZTSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUU7SUFDckQsSUFBSUQsUUFBUVYsZ0JBQWdCO1FBQ3hCLE1BQU1ZLE1BQU0sQ0FBQyxtREFBbUQsRUFBRVosZUFBZSxrR0FBa0csQ0FBQztJQUN4TDtBQUNKO0FBQ0Esb0VBQW9FO0FBQ3BFLE1BQU1FLE1BQU1ELFVBQVVBLFFBQVFDLEdBQUcsR0FBRyxDQUFDO0FBQ3JDLE1BQU1XLFNBQVMsSUFBSWYseURBQVdBLENBQUM7SUFDM0JnQixLQUFLYixRQUFRYSxHQUFHO0lBQ2hCWixLQUFLO1FBQ0QsT0FBT0E7SUFDWDtJQUNBVixNQUFNQSwwQ0FBQUE7SUFDTkMsU0FBU0EsNkNBQUFBO0lBQ1RDLE9BQU9BLDJDQUFBQTtJQUNQLHVFQUF1RTtJQUN2RSx1Q0FBdUM7SUFDdkNxQixTQUFTLENBQUNDO1FBQ04sSUFBSSxPQUFPRCxZQUFZLGFBQWE7WUFDaEMsT0FBT0EsUUFBUUM7UUFDbkIsT0FDSyxJQUFJQSxLQUFLTCxLQUFLLENBQUMsWUFBWTtZQUM1Qix3REFBd0Q7WUFDeEQsT0FBT00sS0FBS0MsS0FBSyxDQUFDbkIsZ0RBQVlBLENBQUNpQixNQUFNO1FBQ3pDLE9BQ0s7WUFDRCxNQUFNSixNQUFNO1FBQ2hCO0lBQ0o7QUFDSjtBQUNBLE1BQU1PLGNBQWMsU0FBU0MsT0FBT0MsSUFBSSxFQUFFQyxJQUFJO0lBQzFDLE1BQU1DLFNBQVNWLE9BQU9LLEtBQUssQ0FBQ0csS0FBS1osS0FBSyxJQUFJYTtJQUMxQyxPQUFPQyxPQUFPQyxJQUFJO0FBQ3RCO0FBQ0FMLFlBQVlNLFFBQVEsR0FBRyxTQUFVSixJQUFJLEVBQUVDLElBQUk7SUFDdkMsT0FBT1QsT0FBT0ssS0FBSyxDQUFDRyxLQUFLWixLQUFLLElBQUlhO0FBQ3RDO0FBQ0FILFlBQVl4QixTQUFTLEdBQUdBLHVEQUFTQTtBQUNqQ3dCLFlBQVl2QixVQUFVLEdBQUdBLHdEQUFVQTtBQUNuQ3VCLFlBQVl0QixlQUFlLEdBQUdBLDZEQUFlQTtBQUM3QyxpRUFBZXNCLFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIvYnVpbGQvbGliL2luZGV4LmpzP2Y2Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE1haW4gZW50cnlwb2ludCBmb3IgbGlicmFyaWVzIHVzaW5nIHlhcmdzLXBhcnNlciBpbiBOb2RlLmpzXG4gKiBDSlMgYW5kIEVTTSBlbnZpcm9ubWVudHMuXG4gKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiwgQ29udHJpYnV0b3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogSVNDXG4gKi9cbnZhciBfYSwgX2IsIF9jO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBub3JtYWxpemUsIHJlc29sdmUgfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IGNhbWVsQ2FzZSwgZGVjYW1lbGl6ZSwgbG9va3NMaWtlTnVtYmVyIH0gZnJvbSAnLi9zdHJpbmctdXRpbHMuanMnO1xuaW1wb3J0IHsgWWFyZ3NQYXJzZXIgfSBmcm9tICcuL3lhcmdzLXBhcnNlci5qcyc7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3lhcmdzL3lhcmdzLXBhcnNlciNzdXBwb3J0ZWQtbm9kZWpzLXZlcnNpb25zIGZvciBvdXJcbi8vIHZlcnNpb24gc3VwcG9ydCBwb2xpY3kuIFRoZSBZQVJHU19NSU5fTk9ERV9WRVJTSU9OIGlzIHVzZWQgZm9yIHRlc3Rpbmcgb25seS5cbmNvbnN0IG1pbk5vZGVWZXJzaW9uID0gKHByb2Nlc3MgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuWUFSR1NfTUlOX05PREVfVkVSU0lPTilcbiAgICA/IE51bWJlcihwcm9jZXNzLmVudi5ZQVJHU19NSU5fTk9ERV9WRVJTSU9OKVxuICAgIDogMTI7XG5jb25zdCBub2RlVmVyc2lvbiA9IChfYiA9IChfYSA9IHByb2Nlc3MgPT09IG51bGwgfHwgcHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvY2Vzcy52ZXJzaW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5vZGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChfYyA9IHByb2Nlc3MgPT09IG51bGwgfHwgcHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvY2Vzcy52ZXJzaW9uKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2xpY2UoMSk7XG5pZiAobm9kZVZlcnNpb24pIHtcbiAgICBjb25zdCBtYWpvciA9IE51bWJlcihub2RlVmVyc2lvbi5tYXRjaCgvXihbXi5dKykvKVsxXSk7XG4gICAgaWYgKG1ham9yIDwgbWluTm9kZVZlcnNpb24pIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYHlhcmdzIHBhcnNlciBzdXBwb3J0cyBhIG1pbmltdW0gTm9kZS5qcyB2ZXJzaW9uIG9mICR7bWluTm9kZVZlcnNpb259LiBSZWFkIG91ciB2ZXJzaW9uIHN1cHBvcnQgcG9saWN5OiBodHRwczovL2dpdGh1Yi5jb20veWFyZ3MveWFyZ3MtcGFyc2VyI3N1cHBvcnRlZC1ub2RlanMtdmVyc2lvbnNgKTtcbiAgICB9XG59XG4vLyBDcmVhdGVzIGEgeWFyZ3MtcGFyc2VyIGluc3RhbmNlIHVzaW5nIE5vZGUuanMgc3RhbmRhcmQgbGlicmFyaWVzOlxuY29uc3QgZW52ID0gcHJvY2VzcyA/IHByb2Nlc3MuZW52IDoge307XG5jb25zdCBwYXJzZXIgPSBuZXcgWWFyZ3NQYXJzZXIoe1xuICAgIGN3ZDogcHJvY2Vzcy5jd2QsXG4gICAgZW52OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBlbnY7XG4gICAgfSxcbiAgICBmb3JtYXQsXG4gICAgbm9ybWFsaXplLFxuICAgIHJlc29sdmUsXG4gICAgLy8gVE9ETzogZmlndXJlICBvdXQgYSAgd2F5IHRvIGNvbWJpbmUgRVNNIGFuZCBDSlMgY292ZXJhZ2UsIHN1Y2ggIHRoYXRcbiAgICAvLyB3ZSBjYW4gZXhlcmNpc2UgYWxsIHRoZSBsaW5lcyBiZWxvdzpcbiAgICByZXF1aXJlOiAocGF0aCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZShwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC5qc29uJC8pKSB7XG4gICAgICAgICAgICAvLyBBZGRyZXNzZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS95YXJncy95YXJncy9pc3N1ZXMvMjA0MFxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHBhdGgsICd1dGY4JykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ29ubHkgLmpzb24gY29uZmlnIGZpbGVzIGFyZSBzdXBwb3J0ZWQgaW4gRVNNJyk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcbmNvbnN0IHlhcmdzUGFyc2VyID0gZnVuY3Rpb24gUGFyc2VyKGFyZ3MsIG9wdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBwYXJzZXIucGFyc2UoYXJncy5zbGljZSgpLCBvcHRzKTtcbiAgICByZXR1cm4gcmVzdWx0LmFyZ3Y7XG59O1xueWFyZ3NQYXJzZXIuZGV0YWlsZWQgPSBmdW5jdGlvbiAoYXJncywgb3B0cykge1xuICAgIHJldHVybiBwYXJzZXIucGFyc2UoYXJncy5zbGljZSgpLCBvcHRzKTtcbn07XG55YXJnc1BhcnNlci5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG55YXJnc1BhcnNlci5kZWNhbWVsaXplID0gZGVjYW1lbGl6ZTtcbnlhcmdzUGFyc2VyLmxvb2tzTGlrZU51bWJlciA9IGxvb2tzTGlrZU51bWJlcjtcbmV4cG9ydCBkZWZhdWx0IHlhcmdzUGFyc2VyO1xuIl0sIm5hbWVzIjpbIl9hIiwiX2IiLCJfYyIsImZvcm1hdCIsIm5vcm1hbGl6ZSIsInJlc29sdmUiLCJjYW1lbENhc2UiLCJkZWNhbWVsaXplIiwibG9va3NMaWtlTnVtYmVyIiwiWWFyZ3NQYXJzZXIiLCJyZWFkRmlsZVN5bmMiLCJtaW5Ob2RlVmVyc2lvbiIsInByb2Nlc3MiLCJlbnYiLCJZQVJHU19NSU5fTk9ERV9WRVJTSU9OIiwiTnVtYmVyIiwibm9kZVZlcnNpb24iLCJ2ZXJzaW9ucyIsIm5vZGUiLCJ2ZXJzaW9uIiwic2xpY2UiLCJtYWpvciIsIm1hdGNoIiwiRXJyb3IiLCJwYXJzZXIiLCJjd2QiLCJyZXF1aXJlIiwicGF0aCIsIkpTT04iLCJwYXJzZSIsInlhcmdzUGFyc2VyIiwiUGFyc2VyIiwiYXJncyIsIm9wdHMiLCJyZXN1bHQiLCJhcmd2IiwiZGV0YWlsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/yargs-parser/build/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/yargs-parser/build/lib/string-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/yargs-parser/build/lib/string-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelCase: () => (/* binding */ camelCase),\n/* harmony export */   decamelize: () => (/* binding */ decamelize),\n/* harmony export */   looksLikeNumber: () => (/* binding */ looksLikeNumber)\n/* harmony export */ });\n/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */ function camelCase(str) {\n    // Handle the case where an argument is provided as camel case, e.g., fooBar.\n    // by ensuring that the string isn't already mixed case:\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n    if (!isCamelCase) {\n        str = str.toLowerCase();\n    }\n    if (str.indexOf(\"-\") === -1 && str.indexOf(\"_\") === -1) {\n        return str;\n    } else {\n        let camelcase = \"\";\n        let nextChrUpper = false;\n        const leadingHyphens = str.match(/^-+/);\n        for(let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++){\n            let chr = str.charAt(i);\n            if (nextChrUpper) {\n                nextChrUpper = false;\n                chr = chr.toUpperCase();\n            }\n            if (i !== 0 && (chr === \"-\" || chr === \"_\")) {\n                nextChrUpper = true;\n            } else if (chr !== \"-\" && chr !== \"_\") {\n                camelcase += chr;\n            }\n        }\n        return camelcase;\n    }\n}\nfunction decamelize(str, joinString) {\n    const lowercase = str.toLowerCase();\n    joinString = joinString || \"-\";\n    let notCamelcase = \"\";\n    for(let i = 0; i < str.length; i++){\n        const chrLower = lowercase.charAt(i);\n        const chrString = str.charAt(i);\n        if (chrLower !== chrString && i > 0) {\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n        } else {\n            notCamelcase += chrString;\n        }\n    }\n    return notCamelcase;\n}\nfunction looksLikeNumber(x) {\n    if (x === null || x === undefined) return false;\n    // if loaded from config, may already be a number.\n    if (typeof x === \"number\") return true;\n    // hexadecimal.\n    if (/^0x[0-9a-f]+$/i.test(x)) return true;\n    // don't treat 0123 as a number; as it drops the leading '0'.\n    if (/^0[^.]/.test(x)) return false;\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveWFyZ3MtcGFyc2VyL2J1aWxkL2xpYi9zdHJpbmctdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNNLFNBQVNBLFVBQVVDLEdBQUc7SUFDekIsNkVBQTZFO0lBQzdFLHdEQUF3RDtJQUN4RCxNQUFNQyxjQUFjRCxRQUFRQSxJQUFJRSxXQUFXLE1BQU1GLFFBQVFBLElBQUlHLFdBQVc7SUFDeEUsSUFBSSxDQUFDRixhQUFhO1FBQ2RELE1BQU1BLElBQUlFLFdBQVc7SUFDekI7SUFDQSxJQUFJRixJQUFJSSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUtKLElBQUlJLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRztRQUNwRCxPQUFPSjtJQUNYLE9BQ0s7UUFDRCxJQUFJSyxZQUFZO1FBQ2hCLElBQUlDLGVBQWU7UUFDbkIsTUFBTUMsaUJBQWlCUCxJQUFJUSxLQUFLLENBQUM7UUFDakMsSUFBSyxJQUFJQyxJQUFJRixpQkFBaUJBLGNBQWMsQ0FBQyxFQUFFLENBQUNHLE1BQU0sR0FBRyxHQUFHRCxJQUFJVCxJQUFJVSxNQUFNLEVBQUVELElBQUs7WUFDN0UsSUFBSUUsTUFBTVgsSUFBSVksTUFBTSxDQUFDSDtZQUNyQixJQUFJSCxjQUFjO2dCQUNkQSxlQUFlO2dCQUNmSyxNQUFNQSxJQUFJUixXQUFXO1lBQ3pCO1lBQ0EsSUFBSU0sTUFBTSxLQUFNRSxDQUFBQSxRQUFRLE9BQU9BLFFBQVEsR0FBRSxHQUFJO2dCQUN6Q0wsZUFBZTtZQUNuQixPQUNLLElBQUlLLFFBQVEsT0FBT0EsUUFBUSxLQUFLO2dCQUNqQ04sYUFBYU07WUFDakI7UUFDSjtRQUNBLE9BQU9OO0lBQ1g7QUFDSjtBQUNPLFNBQVNRLFdBQVdiLEdBQUcsRUFBRWMsVUFBVTtJQUN0QyxNQUFNQyxZQUFZZixJQUFJRSxXQUFXO0lBQ2pDWSxhQUFhQSxjQUFjO0lBQzNCLElBQUlFLGVBQWU7SUFDbkIsSUFBSyxJQUFJUCxJQUFJLEdBQUdBLElBQUlULElBQUlVLE1BQU0sRUFBRUQsSUFBSztRQUNqQyxNQUFNUSxXQUFXRixVQUFVSCxNQUFNLENBQUNIO1FBQ2xDLE1BQU1TLFlBQVlsQixJQUFJWSxNQUFNLENBQUNIO1FBQzdCLElBQUlRLGFBQWFDLGFBQWFULElBQUksR0FBRztZQUNqQ08sZ0JBQWdCLENBQUMsRUFBRUYsV0FBVyxFQUFFQyxVQUFVSCxNQUFNLENBQUNILEdBQUcsQ0FBQztRQUN6RCxPQUNLO1lBQ0RPLGdCQUFnQkU7UUFDcEI7SUFDSjtJQUNBLE9BQU9GO0FBQ1g7QUFDTyxTQUFTRyxnQkFBZ0JDLENBQUM7SUFDN0IsSUFBSUEsTUFBTSxRQUFRQSxNQUFNQyxXQUNwQixPQUFPO0lBQ1gsa0RBQWtEO0lBQ2xELElBQUksT0FBT0QsTUFBTSxVQUNiLE9BQU87SUFDWCxlQUFlO0lBQ2YsSUFBSSxpQkFBaUJFLElBQUksQ0FBQ0YsSUFDdEIsT0FBTztJQUNYLDZEQUE2RDtJQUM3RCxJQUFJLFNBQVNFLElBQUksQ0FBQ0YsSUFDZCxPQUFPO0lBQ1gsT0FBTyw0Q0FBNENFLElBQUksQ0FBQ0Y7QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIvYnVpbGQvbGliL3N0cmluZy11dGlscy5qcz9kMjkwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiwgQ29udHJpYnV0b3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogSVNDXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbENhc2Uoc3RyKSB7XG4gICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIGFuIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGFzIGNhbWVsIGNhc2UsIGUuZy4sIGZvb0Jhci5cbiAgICAvLyBieSBlbnN1cmluZyB0aGF0IHRoZSBzdHJpbmcgaXNuJ3QgYWxyZWFkeSBtaXhlZCBjYXNlOlxuICAgIGNvbnN0IGlzQ2FtZWxDYXNlID0gc3RyICE9PSBzdHIudG9Mb3dlckNhc2UoKSAmJiBzdHIgIT09IHN0ci50b1VwcGVyQ2FzZSgpO1xuICAgIGlmICghaXNDYW1lbENhc2UpIHtcbiAgICAgICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGlmIChzdHIuaW5kZXhPZignLScpID09PSAtMSAmJiBzdHIuaW5kZXhPZignXycpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGNhbWVsY2FzZSA9ICcnO1xuICAgICAgICBsZXQgbmV4dENoclVwcGVyID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGxlYWRpbmdIeXBoZW5zID0gc3RyLm1hdGNoKC9eLSsvKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGxlYWRpbmdIeXBoZW5zID8gbGVhZGluZ0h5cGhlbnNbMF0ubGVuZ3RoIDogMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNociA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpZiAobmV4dENoclVwcGVyKSB7XG4gICAgICAgICAgICAgICAgbmV4dENoclVwcGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2hyID0gY2hyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSAhPT0gMCAmJiAoY2hyID09PSAnLScgfHwgY2hyID09PSAnXycpKSB7XG4gICAgICAgICAgICAgICAgbmV4dENoclVwcGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNociAhPT0gJy0nICYmIGNociAhPT0gJ18nKSB7XG4gICAgICAgICAgICAgICAgY2FtZWxjYXNlICs9IGNocjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FtZWxjYXNlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNhbWVsaXplKHN0ciwgam9pblN0cmluZykge1xuICAgIGNvbnN0IGxvd2VyY2FzZSA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgIGpvaW5TdHJpbmcgPSBqb2luU3RyaW5nIHx8ICctJztcbiAgICBsZXQgbm90Q2FtZWxjYXNlID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hyTG93ZXIgPSBsb3dlcmNhc2UuY2hhckF0KGkpO1xuICAgICAgICBjb25zdCBjaHJTdHJpbmcgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICBpZiAoY2hyTG93ZXIgIT09IGNoclN0cmluZyAmJiBpID4gMCkge1xuICAgICAgICAgICAgbm90Q2FtZWxjYXNlICs9IGAke2pvaW5TdHJpbmd9JHtsb3dlcmNhc2UuY2hhckF0KGkpfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3RDYW1lbGNhc2UgKz0gY2hyU3RyaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3RDYW1lbGNhc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9va3NMaWtlTnVtYmVyKHgpIHtcbiAgICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBpZiBsb2FkZWQgZnJvbSBjb25maWcsIG1heSBhbHJlYWR5IGJlIGEgbnVtYmVyLlxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vIGhleGFkZWNpbWFsLlxuICAgIGlmICgvXjB4WzAtOWEtZl0rJC9pLnRlc3QoeCkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vIGRvbid0IHRyZWF0IDAxMjMgYXMgYSBudW1iZXI7IGFzIGl0IGRyb3BzIHRoZSBsZWFkaW5nICcwJy5cbiAgICBpZiAoL14wW14uXS8udGVzdCh4KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAvXlstXT8oPzpcXGQrKD86XFwuXFxkKik/fFxcLlxcZCspKGVbLStdP1xcZCspPyQvLnRlc3QoeCk7XG59XG4iXSwibmFtZXMiOlsiY2FtZWxDYXNlIiwic3RyIiwiaXNDYW1lbENhc2UiLCJ0b0xvd2VyQ2FzZSIsInRvVXBwZXJDYXNlIiwiaW5kZXhPZiIsImNhbWVsY2FzZSIsIm5leHRDaHJVcHBlciIsImxlYWRpbmdIeXBoZW5zIiwibWF0Y2giLCJpIiwibGVuZ3RoIiwiY2hyIiwiY2hhckF0IiwiZGVjYW1lbGl6ZSIsImpvaW5TdHJpbmciLCJsb3dlcmNhc2UiLCJub3RDYW1lbGNhc2UiLCJjaHJMb3dlciIsImNoclN0cmluZyIsImxvb2tzTGlrZU51bWJlciIsIngiLCJ1bmRlZmluZWQiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/yargs-parser/build/lib/string-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/yargs-parser/build/lib/tokenize-arg-string.js":
/*!********************************************************************!*\
  !*** ./node_modules/yargs-parser/build/lib/tokenize-arg-string.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tokenizeArgString: () => (/* binding */ tokenizeArgString)\n/* harmony export */ });\n/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */ // take an un-split argv string and tokenize it.\nfunction tokenizeArgString(argString) {\n    if (Array.isArray(argString)) {\n        return argString.map((e)=>typeof e !== \"string\" ? e + \"\" : e);\n    }\n    argString = argString.trim();\n    let i = 0;\n    let prevC = null;\n    let c = null;\n    let opening = null;\n    const args = [];\n    for(let ii = 0; ii < argString.length; ii++){\n        prevC = c;\n        c = argString.charAt(ii);\n        // split on spaces unless we're in quotes.\n        if (c === \" \" && !opening) {\n            if (!(prevC === \" \")) {\n                i++;\n            }\n            continue;\n        }\n        // don't split the string if we're in matching\n        // opening or closing single and double quotes.\n        if (c === opening) {\n            opening = null;\n        } else if ((c === \"'\" || c === '\"') && !opening) {\n            opening = c;\n        }\n        if (!args[i]) args[i] = \"\";\n        args[i] += c;\n    }\n    return args;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveWFyZ3MtcGFyc2VyL2J1aWxkL2xpYi90b2tlbml6ZS1hcmctc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBQ0QsZ0RBQWdEO0FBQ3pDLFNBQVNBLGtCQUFrQkMsU0FBUztJQUN2QyxJQUFJQyxNQUFNQyxPQUFPLENBQUNGLFlBQVk7UUFDMUIsT0FBT0EsVUFBVUcsR0FBRyxDQUFDQyxDQUFBQSxJQUFLLE9BQU9BLE1BQU0sV0FBV0EsSUFBSSxLQUFLQTtJQUMvRDtJQUNBSixZQUFZQSxVQUFVSyxJQUFJO0lBQzFCLElBQUlDLElBQUk7SUFDUixJQUFJQyxRQUFRO0lBQ1osSUFBSUMsSUFBSTtJQUNSLElBQUlDLFVBQVU7SUFDZCxNQUFNQyxPQUFPLEVBQUU7SUFDZixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS1gsVUFBVVksTUFBTSxFQUFFRCxLQUFNO1FBQzFDSixRQUFRQztRQUNSQSxJQUFJUixVQUFVYSxNQUFNLENBQUNGO1FBQ3JCLDBDQUEwQztRQUMxQyxJQUFJSCxNQUFNLE9BQU8sQ0FBQ0MsU0FBUztZQUN2QixJQUFJLENBQUVGLENBQUFBLFVBQVUsR0FBRSxHQUFJO2dCQUNsQkQ7WUFDSjtZQUNBO1FBQ0o7UUFDQSw4Q0FBOEM7UUFDOUMsK0NBQStDO1FBQy9DLElBQUlFLE1BQU1DLFNBQVM7WUFDZkEsVUFBVTtRQUNkLE9BQ0ssSUFBSSxDQUFDRCxNQUFNLE9BQU9BLE1BQU0sR0FBRSxLQUFNLENBQUNDLFNBQVM7WUFDM0NBLFVBQVVEO1FBQ2Q7UUFDQSxJQUFJLENBQUNFLElBQUksQ0FBQ0osRUFBRSxFQUNSSSxJQUFJLENBQUNKLEVBQUUsR0FBRztRQUNkSSxJQUFJLENBQUNKLEVBQUUsSUFBSUU7SUFDZjtJQUNBLE9BQU9FO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIvYnVpbGQvbGliL3Rva2VuaXplLWFyZy1zdHJpbmcuanM/MmZhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYsIENvbnRyaWJ1dG9yc1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IElTQ1xuICovXG4vLyB0YWtlIGFuIHVuLXNwbGl0IGFyZ3Ygc3RyaW5nIGFuZCB0b2tlbml6ZSBpdC5cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZUFyZ1N0cmluZyhhcmdTdHJpbmcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdTdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBhcmdTdHJpbmcubWFwKGUgPT4gdHlwZW9mIGUgIT09ICdzdHJpbmcnID8gZSArICcnIDogZSk7XG4gICAgfVxuICAgIGFyZ1N0cmluZyA9IGFyZ1N0cmluZy50cmltKCk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBwcmV2QyA9IG51bGw7XG4gICAgbGV0IGMgPSBudWxsO1xuICAgIGxldCBvcGVuaW5nID0gbnVsbDtcbiAgICBjb25zdCBhcmdzID0gW107XG4gICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGFyZ1N0cmluZy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgcHJldkMgPSBjO1xuICAgICAgICBjID0gYXJnU3RyaW5nLmNoYXJBdChpaSk7XG4gICAgICAgIC8vIHNwbGl0IG9uIHNwYWNlcyB1bmxlc3Mgd2UncmUgaW4gcXVvdGVzLlxuICAgICAgICBpZiAoYyA9PT0gJyAnICYmICFvcGVuaW5nKSB7XG4gICAgICAgICAgICBpZiAoIShwcmV2QyA9PT0gJyAnKSkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbid0IHNwbGl0IHRoZSBzdHJpbmcgaWYgd2UncmUgaW4gbWF0Y2hpbmdcbiAgICAgICAgLy8gb3BlbmluZyBvciBjbG9zaW5nIHNpbmdsZSBhbmQgZG91YmxlIHF1b3Rlcy5cbiAgICAgICAgaWYgKGMgPT09IG9wZW5pbmcpIHtcbiAgICAgICAgICAgIG9wZW5pbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChjID09PSBcIidcIiB8fCBjID09PSAnXCInKSAmJiAhb3BlbmluZykge1xuICAgICAgICAgICAgb3BlbmluZyA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmdzW2ldKVxuICAgICAgICAgICAgYXJnc1tpXSA9ICcnO1xuICAgICAgICBhcmdzW2ldICs9IGM7XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xufVxuIl0sIm5hbWVzIjpbInRva2VuaXplQXJnU3RyaW5nIiwiYXJnU3RyaW5nIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiZSIsInRyaW0iLCJpIiwicHJldkMiLCJjIiwib3BlbmluZyIsImFyZ3MiLCJpaSIsImxlbmd0aCIsImNoYXJBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/yargs-parser/build/lib/tokenize-arg-string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/yargs-parser/build/lib/yargs-parser-types.js":
/*!*******************************************************************!*\
  !*** ./node_modules/yargs-parser/build/lib/yargs-parser-types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultValuesForTypeKey: () => (/* binding */ DefaultValuesForTypeKey)\n/* harmony export */ });\n/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */ var DefaultValuesForTypeKey;\n(function(DefaultValuesForTypeKey) {\n    DefaultValuesForTypeKey[\"BOOLEAN\"] = \"boolean\";\n    DefaultValuesForTypeKey[\"STRING\"] = \"string\";\n    DefaultValuesForTypeKey[\"NUMBER\"] = \"number\";\n    DefaultValuesForTypeKey[\"ARRAY\"] = \"array\";\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveWFyZ3MtcGFyc2VyL2J1aWxkL2xpYi95YXJncy1wYXJzZXItdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDTSxJQUFJQSx3QkFBd0I7QUFDbEMsVUFBVUEsdUJBQXVCO0lBQzlCQSx1QkFBdUIsQ0FBQyxVQUFVLEdBQUc7SUFDckNBLHVCQUF1QixDQUFDLFNBQVMsR0FBRztJQUNwQ0EsdUJBQXVCLENBQUMsU0FBUyxHQUFHO0lBQ3BDQSx1QkFBdUIsQ0FBQyxRQUFRLEdBQUc7QUFDdkMsR0FBR0EsMkJBQTRCQSxDQUFBQSwwQkFBMEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215YXBwLy4vbm9kZV9tb2R1bGVzL3lhcmdzLXBhcnNlci9idWlsZC9saWIveWFyZ3MtcGFyc2VyLXR5cGVzLmpzPzE5NTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2LCBDb250cmlidXRvcnNcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBJU0NcbiAqL1xuZXhwb3J0IHZhciBEZWZhdWx0VmFsdWVzRm9yVHlwZUtleTtcbihmdW5jdGlvbiAoRGVmYXVsdFZhbHVlc0ZvclR5cGVLZXkpIHtcbiAgICBEZWZhdWx0VmFsdWVzRm9yVHlwZUtleVtcIkJPT0xFQU5cIl0gPSBcImJvb2xlYW5cIjtcbiAgICBEZWZhdWx0VmFsdWVzRm9yVHlwZUtleVtcIlNUUklOR1wiXSA9IFwic3RyaW5nXCI7XG4gICAgRGVmYXVsdFZhbHVlc0ZvclR5cGVLZXlbXCJOVU1CRVJcIl0gPSBcIm51bWJlclwiO1xuICAgIERlZmF1bHRWYWx1ZXNGb3JUeXBlS2V5W1wiQVJSQVlcIl0gPSBcImFycmF5XCI7XG59KShEZWZhdWx0VmFsdWVzRm9yVHlwZUtleSB8fCAoRGVmYXVsdFZhbHVlc0ZvclR5cGVLZXkgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIkRlZmF1bHRWYWx1ZXNGb3JUeXBlS2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/yargs-parser/build/lib/yargs-parser-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/yargs-parser/build/lib/yargs-parser.js":
/*!*************************************************************!*\
  !*** ./node_modules/yargs-parser/build/lib/yargs-parser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YargsParser: () => (/* binding */ YargsParser)\n/* harmony export */ });\n/* harmony import */ var _tokenize_arg_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokenize-arg-string.js */ \"(rsc)/./node_modules/yargs-parser/build/lib/tokenize-arg-string.js\");\n/* harmony import */ var _yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./yargs-parser-types.js */ \"(rsc)/./node_modules/yargs-parser/build/lib/yargs-parser-types.js\");\n/* harmony import */ var _string_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./string-utils.js */ \"(rsc)/./node_modules/yargs-parser/build/lib/string-utils.js\");\n/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */ \n\n\nlet mixin;\nclass YargsParser {\n    constructor(_mixin){\n        mixin = _mixin;\n    }\n    parse(argsInput, options) {\n        const opts = Object.assign({\n            alias: undefined,\n            array: undefined,\n            boolean: undefined,\n            config: undefined,\n            configObjects: undefined,\n            configuration: undefined,\n            coerce: undefined,\n            count: undefined,\n            default: undefined,\n            envPrefix: undefined,\n            narg: undefined,\n            normalize: undefined,\n            string: undefined,\n            number: undefined,\n            __: undefined,\n            key: undefined\n        }, options);\n        // allow a string argument to be passed in rather\n        // than an argv array.\n        const args = (0,_tokenize_arg_string_js__WEBPACK_IMPORTED_MODULE_0__.tokenizeArgString)(argsInput);\n        // tokenizeArgString adds extra quotes to args if argsInput is a string\n        // only strip those extra quotes in processValue if argsInput is a string\n        const inputIsString = typeof argsInput === \"string\";\n        // aliases might have transitive relationships, normalize this.\n        const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n        const configuration = Object.assign({\n            \"boolean-negation\": true,\n            \"camel-case-expansion\": true,\n            \"combine-arrays\": false,\n            \"dot-notation\": true,\n            \"duplicate-arguments-array\": true,\n            \"flatten-duplicate-arrays\": true,\n            \"greedy-arrays\": true,\n            \"halt-at-non-option\": false,\n            \"nargs-eats-options\": false,\n            \"negation-prefix\": \"no-\",\n            \"parse-numbers\": true,\n            \"parse-positional-numbers\": true,\n            \"populate--\": false,\n            \"set-placeholder-key\": false,\n            \"short-option-groups\": true,\n            \"strip-aliased\": false,\n            \"strip-dashed\": false,\n            \"unknown-options-as-args\": false\n        }, opts.configuration);\n        const defaults = Object.assign(Object.create(null), opts.default);\n        const configObjects = opts.configObjects || [];\n        const envPrefix = opts.envPrefix;\n        const notFlagsOption = configuration[\"populate--\"];\n        const notFlagsArgv = notFlagsOption ? \"--\" : \"_\";\n        const newAliases = Object.create(null);\n        const defaulted = Object.create(null);\n        // allow a i18n handler to be passed in, default to a fake one (util.format).\n        const __ = opts.__ || mixin.format;\n        const flags = {\n            aliases: Object.create(null),\n            arrays: Object.create(null),\n            bools: Object.create(null),\n            strings: Object.create(null),\n            numbers: Object.create(null),\n            counts: Object.create(null),\n            normalize: Object.create(null),\n            configs: Object.create(null),\n            nargs: Object.create(null),\n            coercions: Object.create(null),\n            keys: []\n        };\n        const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n        const negatedBoolean = new RegExp(\"^--\" + configuration[\"negation-prefix\"] + \"(.+)\");\n        [].concat(opts.array || []).filter(Boolean).forEach(function(opt) {\n            const key = typeof opt === \"object\" ? opt.key : opt;\n            // assign to flags[bools|strings|numbers]\n            const assignment = Object.keys(opt).map(function(key) {\n                const arrayFlagKeys = {\n                    boolean: \"bools\",\n                    string: \"strings\",\n                    number: \"numbers\"\n                };\n                return arrayFlagKeys[key];\n            }).filter(Boolean).pop();\n            // assign key to be coerced\n            if (assignment) {\n                flags[assignment][key] = true;\n            }\n            flags.arrays[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.boolean || []).filter(Boolean).forEach(function(key) {\n            flags.bools[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.string || []).filter(Boolean).forEach(function(key) {\n            flags.strings[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.number || []).filter(Boolean).forEach(function(key) {\n            flags.numbers[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.count || []).filter(Boolean).forEach(function(key) {\n            flags.counts[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.normalize || []).filter(Boolean).forEach(function(key) {\n            flags.normalize[key] = true;\n            flags.keys.push(key);\n        });\n        if (typeof opts.narg === \"object\") {\n            Object.entries(opts.narg).forEach(([key, value])=>{\n                if (typeof value === \"number\") {\n                    flags.nargs[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.coerce === \"object\") {\n            Object.entries(opts.coerce).forEach(([key, value])=>{\n                if (typeof value === \"function\") {\n                    flags.coercions[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.config !== \"undefined\") {\n            if (Array.isArray(opts.config) || typeof opts.config === \"string\") {\n                ;\n                [].concat(opts.config).filter(Boolean).forEach(function(key) {\n                    flags.configs[key] = true;\n                });\n            } else if (typeof opts.config === \"object\") {\n                Object.entries(opts.config).forEach(([key, value])=>{\n                    if (typeof value === \"boolean\" || typeof value === \"function\") {\n                        flags.configs[key] = value;\n                    }\n                });\n            }\n        }\n        // create a lookup table that takes into account all\n        // combinations of aliases: {f: ['foo'], foo: ['f']}\n        extendAliases(opts.key, aliases, opts.default, flags.arrays);\n        // apply default values to all aliases.\n        Object.keys(defaults).forEach(function(key) {\n            (flags.aliases[key] || []).forEach(function(alias) {\n                defaults[alias] = defaults[key];\n            });\n        });\n        let error = null;\n        checkConfiguration();\n        let notFlags = [];\n        const argv = Object.assign(Object.create(null), {\n            _: []\n        });\n        // TODO(bcoe): for the first pass at removing object prototype  we didn't\n        // remove all prototypes from objects returned by this API, we might want\n        // to gradually move towards doing so.\n        const argvReturn = {};\n        for(let i = 0; i < args.length; i++){\n            const arg = args[i];\n            const truncatedArg = arg.replace(/^-{3,}/, \"---\");\n            let broken;\n            let key;\n            let letters;\n            let m;\n            let next;\n            let value;\n            // any unknown option (except for end-of-options, \"--\")\n            if (arg !== \"--\" && /^-/.test(arg) && isUnknownOptionAsArg(arg)) {\n                pushPositional(arg);\n            // ---, ---=, ----, etc,\n            } else if (truncatedArg.match(/^---+(=|$)/)) {\n                // options without key name are invalid.\n                pushPositional(arg);\n                continue;\n            // -- separated by =\n            } else if (arg.match(/^--.+=/) || !configuration[\"short-option-groups\"] && arg.match(/^-.+=/)) {\n                // Using [\\s\\S] instead of . because js doesn't support the\n                // 'dotall' regex modifier. See:\n                // http://stackoverflow.com/a/1068308/13216\n                m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n                // arrays format = '--f=a b c'\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    if (checkAllAliases(m[1], flags.arrays)) {\n                        i = eatArray(i, m[1], args, m[2]);\n                    } else if (checkAllAliases(m[1], flags.nargs) !== false) {\n                        // nargs format = '--f=monkey washing cat'\n                        i = eatNargs(i, m[1], args, m[2]);\n                    } else {\n                        setArg(m[1], m[2], true);\n                    }\n                }\n            } else if (arg.match(negatedBoolean) && configuration[\"boolean-negation\"]) {\n                m = arg.match(negatedBoolean);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    setArg(key, checkAllAliases(key, flags.arrays) ? [\n                        false\n                    ] : false);\n                }\n            // -- separated by space.\n            } else if (arg.match(/^--.+/) || !configuration[\"short-option-groups\"] && arg.match(/^-[^-]+/)) {\n                m = arg.match(/^--?(.+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '--foo a b c'\n                        i = eatArray(i, key, args);\n                    } else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '--foo a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    } else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        } else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        } else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            // dot-notation flag separated by '='.\n            } else if (arg.match(/^-.\\..+=/)) {\n                m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    setArg(m[1], m[2]);\n                }\n            // dot-notation flag separated by space.\n            } else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n                next = args[i + 1];\n                m = arg.match(/^-(.\\..+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (next !== undefined && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n                        setArg(key, next);\n                        i++;\n                    } else {\n                        setArg(key, defaultValue(key));\n                    }\n                }\n            } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n                letters = arg.slice(1, -1).split(\"\");\n                broken = false;\n                for(let j = 0; j < letters.length; j++){\n                    next = arg.slice(j + 2);\n                    if (letters[j + 1] && letters[j + 1] === \"=\") {\n                        value = arg.slice(j + 3);\n                        key = letters[j];\n                        if (checkAllAliases(key, flags.arrays)) {\n                            // array format = '-f=a b c'\n                            i = eatArray(i, key, args, value);\n                        } else if (checkAllAliases(key, flags.nargs) !== false) {\n                            // nargs format = '-f=monkey washing cat'\n                            i = eatNargs(i, key, args, value);\n                        } else {\n                            setArg(key, value);\n                        }\n                        broken = true;\n                        break;\n                    }\n                    if (next === \"-\") {\n                        setArg(letters[j], next);\n                        continue;\n                    }\n                    // current letter is an alphabetic character and next value is a number\n                    if (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) && checkAllAliases(next, flags.bools) === false) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    } else {\n                        setArg(letters[j], defaultValue(letters[j]));\n                    }\n                }\n                key = arg.slice(-1)[0];\n                if (!broken && key !== \"-\") {\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '-f a b c'\n                        i = eatArray(i, key, args);\n                    } else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '-f a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    } else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        } else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        } else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {\n                // single-digit boolean alias, e.g: xargs -0\n                key = arg.slice(1);\n                setArg(key, defaultValue(key));\n            } else if (arg === \"--\") {\n                notFlags = args.slice(i + 1);\n                break;\n            } else if (configuration[\"halt-at-non-option\"]) {\n                notFlags = args.slice(i);\n                break;\n            } else {\n                pushPositional(arg);\n            }\n        }\n        // order of precedence:\n        // 1. command line arg\n        // 2. value from env var\n        // 3. value from config file\n        // 4. value from config objects\n        // 5. configured default value\n        applyEnvVars(argv, true); // special case: check env vars that point to config file\n        applyEnvVars(argv, false);\n        setConfig(argv);\n        setConfigObjects();\n        applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n        applyCoercions(argv);\n        if (configuration[\"set-placeholder-key\"]) setPlaceholderKeys(argv);\n        // for any counts either not in args or without an explicit default, set to 0\n        Object.keys(flags.counts).forEach(function(key) {\n            if (!hasKey(argv, key.split(\".\"))) setArg(key, 0);\n        });\n        // '--' defaults to undefined.\n        if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = [];\n        notFlags.forEach(function(key) {\n            argv[notFlagsArgv].push(key);\n        });\n        if (configuration[\"camel-case-expansion\"] && configuration[\"strip-dashed\"]) {\n            Object.keys(argv).filter((key)=>key !== \"--\" && key.includes(\"-\")).forEach((key)=>{\n                delete argv[key];\n            });\n        }\n        if (configuration[\"strip-aliased\"]) {\n            ;\n            [].concat(...Object.keys(aliases).map((k)=>aliases[k])).forEach((alias)=>{\n                if (configuration[\"camel-case-expansion\"] && alias.includes(\"-\")) {\n                    delete argv[alias.split(\".\").map((prop)=>(0,_string_utils_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(prop)).join(\".\")];\n                }\n                delete argv[alias];\n            });\n        }\n        // Push argument into positional array, applying numeric coercion:\n        function pushPositional(arg) {\n            const maybeCoercedNumber = maybeCoerceNumber(\"_\", arg);\n            if (typeof maybeCoercedNumber === \"string\" || typeof maybeCoercedNumber === \"number\") {\n                argv._.push(maybeCoercedNumber);\n            }\n        }\n        // how many arguments should we consume, based\n        // on the nargs option?\n        function eatNargs(i, key, args, argAfterEqualSign) {\n            let ii;\n            let toEat = checkAllAliases(key, flags.nargs);\n            // NaN has a special meaning for the array type, indicating that one or\n            // more values are expected.\n            toEat = typeof toEat !== \"number\" || isNaN(toEat) ? 1 : toEat;\n            if (toEat === 0) {\n                if (!isUndefined(argAfterEqualSign)) {\n                    error = Error(__(\"Argument unexpected for: %s\", key));\n                }\n                setArg(key, defaultValue(key));\n                return i;\n            }\n            let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n            if (configuration[\"nargs-eats-options\"]) {\n                // classic behavior, yargs eats positional and dash arguments.\n                if (args.length - (i + 1) + available < toEat) {\n                    error = Error(__(\"Not enough arguments following: %s\", key));\n                }\n                available = toEat;\n            } else {\n                // nargs will not consume flag arguments, e.g., -abc, --foo,\n                // and terminates when one is observed.\n                for(ii = i + 1; ii < args.length; ii++){\n                    if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii])) available++;\n                    else break;\n                }\n                if (available < toEat) error = Error(__(\"Not enough arguments following: %s\", key));\n            }\n            let consumed = Math.min(available, toEat);\n            if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n                setArg(key, argAfterEqualSign);\n                consumed--;\n            }\n            for(ii = i + 1; ii < consumed + i + 1; ii++){\n                setArg(key, args[ii]);\n            }\n            return i + consumed;\n        }\n        // if an option is an array, eat all non-hyphenated arguments\n        // following it... YUM!\n        // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n        function eatArray(i, key, args, argAfterEqualSign) {\n            let argsToSet = [];\n            let next = argAfterEqualSign || args[i + 1];\n            // If both array and nargs are configured, enforce the nargs count:\n            const nargsCount = checkAllAliases(key, flags.nargs);\n            if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) {\n                argsToSet.push(true);\n            } else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {\n                // for keys without value ==> argsToSet remains an empty []\n                // set user default value, if available\n                if (defaults[key] !== undefined) {\n                    const defVal = defaults[key];\n                    argsToSet = Array.isArray(defVal) ? defVal : [\n                        defVal\n                    ];\n                }\n            } else {\n                // value in --option=value is eaten as is\n                if (!isUndefined(argAfterEqualSign)) {\n                    argsToSet.push(processValue(key, argAfterEqualSign, true));\n                }\n                for(let ii = i + 1; ii < args.length; ii++){\n                    if (!configuration[\"greedy-arrays\"] && argsToSet.length > 0 || nargsCount && typeof nargsCount === \"number\" && argsToSet.length >= nargsCount) break;\n                    next = args[ii];\n                    if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) break;\n                    i = ii;\n                    argsToSet.push(processValue(key, next, inputIsString));\n                }\n            }\n            // If both array and nargs are configured, create an error if less than\n            // nargs positionals were found. NaN has special meaning, indicating\n            // that at least one value is required (more are okay).\n            if (typeof nargsCount === \"number\" && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && argsToSet.length === 0)) {\n                error = Error(__(\"Not enough arguments following: %s\", key));\n            }\n            setArg(key, argsToSet);\n            return i;\n        }\n        function setArg(key, val, shouldStripQuotes = inputIsString) {\n            if (/-/.test(key) && configuration[\"camel-case-expansion\"]) {\n                const alias = key.split(\".\").map(function(prop) {\n                    return (0,_string_utils_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(prop);\n                }).join(\".\");\n                addNewAlias(key, alias);\n            }\n            const value = processValue(key, val, shouldStripQuotes);\n            const splitKey = key.split(\".\");\n            setKey(argv, splitKey, value);\n            // handle populating aliases of the full key\n            if (flags.aliases[key]) {\n                flags.aliases[key].forEach(function(x) {\n                    const keyProperties = x.split(\".\");\n                    setKey(argv, keyProperties, value);\n                });\n            }\n            // handle populating aliases of the first element of the dot-notation key\n            if (splitKey.length > 1 && configuration[\"dot-notation\"]) {\n                ;\n                (flags.aliases[splitKey[0]] || []).forEach(function(x) {\n                    let keyProperties = x.split(\".\");\n                    // expand alias with nested objects in key\n                    const a = [].concat(splitKey);\n                    a.shift(); // nuke the old key.\n                    keyProperties = keyProperties.concat(a);\n                    // populate alias only if is not already an alias of the full key\n                    // (already populated above)\n                    if (!(flags.aliases[key] || []).includes(keyProperties.join(\".\"))) {\n                        setKey(argv, keyProperties, value);\n                    }\n                });\n            }\n            // Set normalize getter and setter when key is in 'normalize' but isn't an array\n            if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n                const keys = [\n                    key\n                ].concat(flags.aliases[key] || []);\n                keys.forEach(function(key) {\n                    Object.defineProperty(argvReturn, key, {\n                        enumerable: true,\n                        get () {\n                            return val;\n                        },\n                        set (value) {\n                            val = typeof value === \"string\" ? mixin.normalize(value) : value;\n                        }\n                    });\n                });\n            }\n        }\n        function addNewAlias(key, alias) {\n            if (!(flags.aliases[key] && flags.aliases[key].length)) {\n                flags.aliases[key] = [\n                    alias\n                ];\n                newAliases[alias] = true;\n            }\n            if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n                addNewAlias(alias, key);\n            }\n        }\n        function processValue(key, val, shouldStripQuotes) {\n            // strings may be quoted, clean this up as we assign values.\n            if (shouldStripQuotes) {\n                val = stripQuotes(val);\n            }\n            // handle parsing boolean arguments --foo=true --bar false.\n            if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n                if (typeof val === \"string\") val = val === \"true\";\n            }\n            let value = Array.isArray(val) ? val.map(function(v) {\n                return maybeCoerceNumber(key, v);\n            }) : maybeCoerceNumber(key, val);\n            // increment a count given as arg (either no value or value parsed as boolean)\n            if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === \"boolean\")) {\n                value = increment();\n            }\n            // Set normalized value when key is in 'normalize' and in 'arrays'\n            if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n                if (Array.isArray(val)) value = val.map((val)=>{\n                    return mixin.normalize(val);\n                });\n                else value = mixin.normalize(val);\n            }\n            return value;\n        }\n        function maybeCoerceNumber(key, value) {\n            if (!configuration[\"parse-positional-numbers\"] && key === \"_\") return value;\n            if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n                const shouldCoerceNumber = (0,_string_utils_js__WEBPACK_IMPORTED_MODULE_2__.looksLikeNumber)(value) && configuration[\"parse-numbers\"] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));\n                if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) {\n                    value = Number(value);\n                }\n            }\n            return value;\n        }\n        // set args from config.json file, this should be\n        // applied last so that defaults can be applied.\n        function setConfig(argv) {\n            const configLookup = Object.create(null);\n            // expand defaults/aliases, in-case any happen to reference\n            // the config.json file.\n            applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n            Object.keys(flags.configs).forEach(function(configKey) {\n                const configPath = argv[configKey] || configLookup[configKey];\n                if (configPath) {\n                    try {\n                        let config = null;\n                        const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n                        const resolveConfig = flags.configs[configKey];\n                        if (typeof resolveConfig === \"function\") {\n                            try {\n                                config = resolveConfig(resolvedConfigPath);\n                            } catch (e) {\n                                config = e;\n                            }\n                            if (config instanceof Error) {\n                                error = config;\n                                return;\n                            }\n                        } else {\n                            config = mixin.require(resolvedConfigPath);\n                        }\n                        setConfigObject(config);\n                    } catch (ex) {\n                        // Deno will receive a PermissionDenied error if an attempt is\n                        // made to load config without the --allow-read flag:\n                        if (ex.name === \"PermissionDenied\") error = ex;\n                        else if (argv[configKey]) error = Error(__(\"Invalid JSON config file: %s\", configPath));\n                    }\n                }\n            });\n        }\n        // set args from config object.\n        // it recursively checks nested objects.\n        function setConfigObject(config, prev) {\n            Object.keys(config).forEach(function(key) {\n                const value = config[key];\n                const fullKey = prev ? prev + \".\" + key : key;\n                // if the value is an inner object and we have dot-notation\n                // enabled, treat inner objects in config the same as\n                // heavily nested dot notations (foo.bar.apple).\n                if (typeof value === \"object\" && value !== null && !Array.isArray(value) && configuration[\"dot-notation\"]) {\n                    // if the value is an object but not an array, check nested object\n                    setConfigObject(value, fullKey);\n                } else {\n                    // setting arguments via CLI takes precedence over\n                    // values within the config file.\n                    if (!hasKey(argv, fullKey.split(\".\")) || checkAllAliases(fullKey, flags.arrays) && configuration[\"combine-arrays\"]) {\n                        setArg(fullKey, value);\n                    }\n                }\n            });\n        }\n        // set all config objects passed in opts\n        function setConfigObjects() {\n            if (typeof configObjects !== \"undefined\") {\n                configObjects.forEach(function(configObject) {\n                    setConfigObject(configObject);\n                });\n            }\n        }\n        function applyEnvVars(argv, configOnly) {\n            if (typeof envPrefix === \"undefined\") return;\n            const prefix = typeof envPrefix === \"string\" ? envPrefix : \"\";\n            const env = mixin.env();\n            Object.keys(env).forEach(function(envVar) {\n                if (prefix === \"\" || envVar.lastIndexOf(prefix, 0) === 0) {\n                    // get array of nested keys and convert them to camel case\n                    const keys = envVar.split(\"__\").map(function(key, i) {\n                        if (i === 0) {\n                            key = key.substring(prefix.length);\n                        }\n                        return (0,_string_utils_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(key);\n                    });\n                    if ((configOnly && flags.configs[keys.join(\".\")] || !configOnly) && !hasKey(argv, keys)) {\n                        setArg(keys.join(\".\"), env[envVar]);\n                    }\n                }\n            });\n        }\n        function applyCoercions(argv) {\n            let coerce;\n            const applied = new Set();\n            Object.keys(argv).forEach(function(key) {\n                if (!applied.has(key)) {\n                    coerce = checkAllAliases(key, flags.coercions);\n                    if (typeof coerce === \"function\") {\n                        try {\n                            const value = maybeCoerceNumber(key, coerce(argv[key]));\n                            [].concat(flags.aliases[key] || [], key).forEach((ali)=>{\n                                applied.add(ali);\n                                argv[ali] = value;\n                            });\n                        } catch (err) {\n                            error = err;\n                        }\n                    }\n                }\n            });\n        }\n        function setPlaceholderKeys(argv) {\n            flags.keys.forEach((key)=>{\n                // don't set placeholder keys for dot notation options 'foo.bar'.\n                if (~key.indexOf(\".\")) return;\n                if (typeof argv[key] === \"undefined\") argv[key] = undefined;\n            });\n            return argv;\n        }\n        function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n            Object.keys(defaults).forEach(function(key) {\n                if (!hasKey(obj, key.split(\".\"))) {\n                    setKey(obj, key.split(\".\"), defaults[key]);\n                    if (canLog) defaulted[key] = true;\n                    (aliases[key] || []).forEach(function(x) {\n                        if (hasKey(obj, x.split(\".\"))) return;\n                        setKey(obj, x.split(\".\"), defaults[key]);\n                    });\n                }\n            });\n        }\n        function hasKey(obj, keys) {\n            let o = obj;\n            if (!configuration[\"dot-notation\"]) keys = [\n                keys.join(\".\")\n            ];\n            keys.slice(0, -1).forEach(function(key) {\n                o = o[key] || {};\n            });\n            const key = keys[keys.length - 1];\n            if (typeof o !== \"object\") return false;\n            else return key in o;\n        }\n        function setKey(obj, keys, value) {\n            let o = obj;\n            if (!configuration[\"dot-notation\"]) keys = [\n                keys.join(\".\")\n            ];\n            keys.slice(0, -1).forEach(function(key) {\n                // TODO(bcoe): in the next major version of yargs, switch to\n                // Object.create(null) for dot notation:\n                key = sanitizeKey(key);\n                if (typeof o === \"object\" && o[key] === undefined) {\n                    o[key] = {};\n                }\n                if (typeof o[key] !== \"object\" || Array.isArray(o[key])) {\n                    // ensure that o[key] is an array, and that the last item is an empty object.\n                    if (Array.isArray(o[key])) {\n                        o[key].push({});\n                    } else {\n                        o[key] = [\n                            o[key],\n                            {}\n                        ];\n                    }\n                    // we want to update the empty object at the end of the o[key] array, so set o to that object\n                    o = o[key][o[key].length - 1];\n                } else {\n                    o = o[key];\n                }\n            });\n            // TODO(bcoe): in the next major version of yargs, switch to\n            // Object.create(null) for dot notation:\n            const key = sanitizeKey(keys[keys.length - 1]);\n            const isTypeArray = checkAllAliases(keys.join(\".\"), flags.arrays);\n            const isValueArray = Array.isArray(value);\n            let duplicate = configuration[\"duplicate-arguments-array\"];\n            // nargs has higher priority than duplicate\n            if (!duplicate && checkAllAliases(key, flags.nargs)) {\n                duplicate = true;\n                if (!isUndefined(o[key]) && flags.nargs[key] === 1 || Array.isArray(o[key]) && o[key].length === flags.nargs[key]) {\n                    o[key] = undefined;\n                }\n            }\n            if (value === increment()) {\n                o[key] = increment(o[key]);\n            } else if (Array.isArray(o[key])) {\n                if (duplicate && isTypeArray && isValueArray) {\n                    o[key] = configuration[\"flatten-duplicate-arrays\"] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [\n                        o[key]\n                    ]).concat([\n                        value\n                    ]);\n                } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n                    o[key] = value;\n                } else {\n                    o[key] = o[key].concat([\n                        value\n                    ]);\n                }\n            } else if (o[key] === undefined && isTypeArray) {\n                o[key] = isValueArray ? value : [\n                    value\n                ];\n            } else if (duplicate && !(o[key] === undefined || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) {\n                o[key] = [\n                    o[key],\n                    value\n                ];\n            } else {\n                o[key] = value;\n            }\n        }\n        // extend the aliases list with inferred aliases.\n        function extendAliases(...args) {\n            args.forEach(function(obj) {\n                Object.keys(obj || {}).forEach(function(key) {\n                    // short-circuit if we've already added a key\n                    // to the aliases array, for example it might\n                    // exist in both 'opts.default' and 'opts.key'.\n                    if (flags.aliases[key]) return;\n                    flags.aliases[key] = [].concat(aliases[key] || []);\n                    // For \"--option-name\", also set argv.optionName\n                    flags.aliases[key].concat(key).forEach(function(x) {\n                        if (/-/.test(x) && configuration[\"camel-case-expansion\"]) {\n                            const c = (0,_string_utils_js__WEBPACK_IMPORTED_MODULE_2__.camelCase)(x);\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    // For \"--optionName\", also set argv['option-name']\n                    flags.aliases[key].concat(key).forEach(function(x) {\n                        if (x.length > 1 && /[A-Z]/.test(x) && configuration[\"camel-case-expansion\"]) {\n                            const c = (0,_string_utils_js__WEBPACK_IMPORTED_MODULE_2__.decamelize)(x, \"-\");\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].forEach(function(x) {\n                        flags.aliases[x] = [\n                            key\n                        ].concat(flags.aliases[key].filter(function(y) {\n                            return x !== y;\n                        }));\n                    });\n                });\n            });\n        }\n        function checkAllAliases(key, flag) {\n            const toCheck = [].concat(flags.aliases[key] || [], key);\n            const keys = Object.keys(flag);\n            const setAlias = toCheck.find((key)=>keys.includes(key));\n            return setAlias ? flag[setAlias] : false;\n        }\n        function hasAnyFlag(key) {\n            const flagsKeys = Object.keys(flags);\n            const toCheck = [].concat(flagsKeys.map((k)=>flags[k]));\n            return toCheck.some(function(flag) {\n                return Array.isArray(flag) ? flag.includes(key) : flag[key];\n            });\n        }\n        function hasFlagsMatching(arg, ...patterns) {\n            const toCheck = [].concat(...patterns);\n            return toCheck.some(function(pattern) {\n                const match = arg.match(pattern);\n                return match && hasAnyFlag(match[1]);\n            });\n        }\n        // based on a simplified version of the short flag group parsing logic\n        function hasAllShortFlags(arg) {\n            // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group\n            if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n                return false;\n            }\n            let hasAllFlags = true;\n            let next;\n            const letters = arg.slice(1).split(\"\");\n            for(let j = 0; j < letters.length; j++){\n                next = arg.slice(j + 2);\n                if (!hasAnyFlag(letters[j])) {\n                    hasAllFlags = false;\n                    break;\n                }\n                if (letters[j + 1] && letters[j + 1] === \"=\" || next === \"-\" || /[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) || letters[j + 1] && letters[j + 1].match(/\\W/)) {\n                    break;\n                }\n            }\n            return hasAllFlags;\n        }\n        function isUnknownOptionAsArg(arg) {\n            return configuration[\"unknown-options-as-args\"] && isUnknownOption(arg);\n        }\n        function isUnknownOption(arg) {\n            arg = arg.replace(/^-{3,}/, \"--\");\n            // ignore negative numbers\n            if (arg.match(negative)) {\n                return false;\n            }\n            // if this is a short option group and all of them are configured, it isn't unknown\n            if (hasAllShortFlags(arg)) {\n                return false;\n            }\n            // e.g. '--count=2'\n            const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n            // e.g. '-a' or '--arg'\n            const normalFlag = /^-+([^=]+?)$/;\n            // e.g. '-a-'\n            const flagEndingInHyphen = /^-+([^=]+?)-$/;\n            // e.g. '-abc123'\n            const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n            // e.g. '-a/usr/local'\n            const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n            // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method\n            return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n        }\n        // make a best effort to pick a default value\n        // for an option based on name and type.\n        function defaultValue(key) {\n            if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) {\n                return defaults[key];\n            } else {\n                return defaultForType(guessType(key));\n            }\n        }\n        // return a default value, given the type of a flag.,\n        function defaultForType(type) {\n            const def = {\n                [_yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.BOOLEAN]: true,\n                [_yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.STRING]: \"\",\n                [_yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.NUMBER]: undefined,\n                [_yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.ARRAY]: []\n            };\n            return def[type];\n        }\n        // given a flag, enforce a default type.\n        function guessType(key) {\n            let type = _yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.BOOLEAN;\n            if (checkAllAliases(key, flags.strings)) type = _yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.STRING;\n            else if (checkAllAliases(key, flags.numbers)) type = _yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.NUMBER;\n            else if (checkAllAliases(key, flags.bools)) type = _yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.BOOLEAN;\n            else if (checkAllAliases(key, flags.arrays)) type = _yargs_parser_types_js__WEBPACK_IMPORTED_MODULE_1__.DefaultValuesForTypeKey.ARRAY;\n            return type;\n        }\n        function isUndefined(num) {\n            return num === undefined;\n        }\n        // check user configuration settings for inconsistencies\n        function checkConfiguration() {\n            // count keys should not be set as array/narg\n            Object.keys(flags.counts).find((key)=>{\n                if (checkAllAliases(key, flags.arrays)) {\n                    error = Error(__(\"Invalid configuration: %s, opts.count excludes opts.array.\", key));\n                    return true;\n                } else if (checkAllAliases(key, flags.nargs)) {\n                    error = Error(__(\"Invalid configuration: %s, opts.count excludes opts.narg.\", key));\n                    return true;\n                }\n                return false;\n            });\n        }\n        return {\n            aliases: Object.assign({}, flags.aliases),\n            argv: Object.assign(argvReturn, argv),\n            configuration: configuration,\n            defaulted: Object.assign({}, defaulted),\n            error: error,\n            newAliases: Object.assign({}, newAliases)\n        };\n    }\n}\n// if any aliases reference each other, we should\n// merge them together.\nfunction combineAliases(aliases) {\n    const aliasArrays = [];\n    const combined = Object.create(null);\n    let change = true;\n    // turn alias lookup hash {key: ['alias1', 'alias2']} into\n    // a simple array ['key', 'alias1', 'alias2']\n    Object.keys(aliases).forEach(function(key) {\n        aliasArrays.push([].concat(aliases[key], key));\n    });\n    // combine arrays until zero changes are\n    // made in an iteration.\n    while(change){\n        change = false;\n        for(let i = 0; i < aliasArrays.length; i++){\n            for(let ii = i + 1; ii < aliasArrays.length; ii++){\n                const intersect = aliasArrays[i].filter(function(v) {\n                    return aliasArrays[ii].indexOf(v) !== -1;\n                });\n                if (intersect.length) {\n                    aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n                    aliasArrays.splice(ii, 1);\n                    change = true;\n                    break;\n                }\n            }\n        }\n    }\n    // map arrays back to the hash-lookup (de-dupe while\n    // we're at it).\n    aliasArrays.forEach(function(aliasArray) {\n        aliasArray = aliasArray.filter(function(v, i, self) {\n            return self.indexOf(v) === i;\n        });\n        const lastAlias = aliasArray.pop();\n        if (lastAlias !== undefined && typeof lastAlias === \"string\") {\n            combined[lastAlias] = aliasArray;\n        }\n    });\n    return combined;\n}\n// this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\nfunction increment(orig) {\n    return orig !== undefined ? orig + 1 : 1;\n}\n// TODO(bcoe): in the next major version of yargs, switch to\n// Object.create(null) for dot notation:\nfunction sanitizeKey(key) {\n    if (key === \"__proto__\") return \"___proto___\";\n    return key;\n}\nfunction stripQuotes(val) {\n    return typeof val === \"string\" && (val[0] === \"'\" || val[0] === '\"') && val[val.length - 1] === val[0] ? val.substring(1, val.length - 1) : val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/yargs-parser/build/lib/yargs-parser.js\n");

/***/ })

};
;