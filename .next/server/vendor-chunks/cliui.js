"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cliui";
exports.ids = ["vendor-chunks/cliui"];
exports.modules = {

/***/ "(rsc)/./node_modules/cliui/build/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/cliui/build/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UI: () => (/* binding */ UI),\n/* harmony export */   cliui: () => (/* binding */ cliui)\n/* harmony export */ });\n\nconst align = {\n    right: alignRight,\n    center: alignCenter\n};\nconst top = 0;\nconst right = 1;\nconst bottom = 2;\nconst left = 3;\nclass UI {\n    constructor(opts){\n        var _a;\n        this.width = opts.width;\n        this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;\n        this.rows = [];\n    }\n    span(...args) {\n        const cols = this.div(...args);\n        cols.span = true;\n    }\n    resetOutput() {\n        this.rows = [];\n    }\n    div(...args) {\n        if (args.length === 0) {\n            this.div(\"\");\n        }\n        if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === \"string\") {\n            return this.applyLayoutDSL(args[0]);\n        }\n        const cols = args.map((arg)=>{\n            if (typeof arg === \"string\") {\n                return this.colFromString(arg);\n            }\n            return arg;\n        });\n        this.rows.push(cols);\n        return cols;\n    }\n    shouldApplyLayoutDSL(...args) {\n        return args.length === 1 && typeof args[0] === \"string\" && /[\\t\\n]/.test(args[0]);\n    }\n    applyLayoutDSL(str) {\n        const rows = str.split(\"\\n\").map((row)=>row.split(\"\t\"));\n        let leftColumnWidth = 0;\n        // simple heuristic for layout, make sure the\n        // second column lines up along the left-hand.\n        // don't allow the first column to take up more\n        // than 50% of the screen.\n        rows.forEach((columns)=>{\n            if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {\n                leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));\n            }\n        });\n        // generate a table:\n        //  replacing ' ' with padding calculations.\n        //  using the algorithmically generated width.\n        rows.forEach((columns)=>{\n            this.div(...columns.map((r, i)=>{\n                return {\n                    text: r.trim(),\n                    padding: this.measurePadding(r),\n                    width: i === 0 && columns.length > 1 ? leftColumnWidth : undefined\n                };\n            }));\n        });\n        return this.rows[this.rows.length - 1];\n    }\n    colFromString(text) {\n        return {\n            text,\n            padding: this.measurePadding(text)\n        };\n    }\n    measurePadding(str) {\n        // measure padding without ansi escape codes\n        const noAnsi = mixin.stripAnsi(str);\n        return [\n            0,\n            noAnsi.match(/\\s*$/)[0].length,\n            0,\n            noAnsi.match(/^\\s*/)[0].length\n        ];\n    }\n    toString() {\n        const lines = [];\n        this.rows.forEach((row)=>{\n            this.rowToString(row, lines);\n        });\n        // don't display any lines with the\n        // hidden flag set.\n        return lines.filter((line)=>!line.hidden).map((line)=>line.text).join(\"\\n\");\n    }\n    rowToString(row, lines) {\n        this.rasterize(row).forEach((rrow, r)=>{\n            let str = \"\";\n            rrow.forEach((col, c)=>{\n                const { width } = row[c]; // the width with padding.\n                const wrapWidth = this.negatePadding(row[c]); // the width without padding.\n                let ts = col; // temporary string used during alignment/padding.\n                if (wrapWidth > mixin.stringWidth(col)) {\n                    ts += \" \".repeat(wrapWidth - mixin.stringWidth(col));\n                }\n                // align the string within its column.\n                if (row[c].align && row[c].align !== \"left\" && this.wrap) {\n                    const fn = align[row[c].align];\n                    ts = fn(ts, wrapWidth);\n                    if (mixin.stringWidth(ts) < wrapWidth) {\n                        ts += \" \".repeat((width || 0) - mixin.stringWidth(ts) - 1);\n                    }\n                }\n                // apply border and padding to string.\n                const padding = row[c].padding || [\n                    0,\n                    0,\n                    0,\n                    0\n                ];\n                if (padding[left]) {\n                    str += \" \".repeat(padding[left]);\n                }\n                str += addBorder(row[c], ts, \"| \");\n                str += ts;\n                str += addBorder(row[c], ts, \" |\");\n                if (padding[right]) {\n                    str += \" \".repeat(padding[right]);\n                }\n                // if prior row is span, try to render the\n                // current row on the prior line.\n                if (r === 0 && lines.length > 0) {\n                    str = this.renderInline(str, lines[lines.length - 1]);\n                }\n            });\n            // remove trailing whitespace.\n            lines.push({\n                text: str.replace(/ +$/, \"\"),\n                span: row.span\n            });\n        });\n        return lines;\n    }\n    // if the full 'source' can render in\n    // the target line, do so.\n    renderInline(source, previousLine) {\n        const match = source.match(/^ */);\n        const leadingWhitespace = match ? match[0].length : 0;\n        const target = previousLine.text;\n        const targetTextWidth = mixin.stringWidth(target.trimRight());\n        if (!previousLine.span) {\n            return source;\n        }\n        // if we're not applying wrapping logic,\n        // just always append to the span.\n        if (!this.wrap) {\n            previousLine.hidden = true;\n            return target + source;\n        }\n        if (leadingWhitespace < targetTextWidth) {\n            return source;\n        }\n        previousLine.hidden = true;\n        return target.trimRight() + \" \".repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();\n    }\n    rasterize(row) {\n        const rrows = [];\n        const widths = this.columnWidths(row);\n        let wrapped;\n        // word wrap all columns, and create\n        // a data-structure that is easy to rasterize.\n        row.forEach((col, c)=>{\n            // leave room for left and right padding.\n            col.width = widths[c];\n            if (this.wrap) {\n                wrapped = mixin.wrap(col.text, this.negatePadding(col), {\n                    hard: true\n                }).split(\"\\n\");\n            } else {\n                wrapped = col.text.split(\"\\n\");\n            }\n            if (col.border) {\n                wrapped.unshift(\".\" + \"-\".repeat(this.negatePadding(col) + 2) + \".\");\n                wrapped.push(\"'\" + \"-\".repeat(this.negatePadding(col) + 2) + \"'\");\n            }\n            // add top and bottom padding.\n            if (col.padding) {\n                wrapped.unshift(...new Array(col.padding[top] || 0).fill(\"\"));\n                wrapped.push(...new Array(col.padding[bottom] || 0).fill(\"\"));\n            }\n            wrapped.forEach((str, r)=>{\n                if (!rrows[r]) {\n                    rrows.push([]);\n                }\n                const rrow = rrows[r];\n                for(let i = 0; i < c; i++){\n                    if (rrow[i] === undefined) {\n                        rrow.push(\"\");\n                    }\n                }\n                rrow.push(str);\n            });\n        });\n        return rrows;\n    }\n    negatePadding(col) {\n        let wrapWidth = col.width || 0;\n        if (col.padding) {\n            wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);\n        }\n        if (col.border) {\n            wrapWidth -= 4;\n        }\n        return wrapWidth;\n    }\n    columnWidths(row) {\n        if (!this.wrap) {\n            return row.map((col)=>{\n                return col.width || mixin.stringWidth(col.text);\n            });\n        }\n        let unset = row.length;\n        let remainingWidth = this.width;\n        // column widths can be set in config.\n        const widths = row.map((col)=>{\n            if (col.width) {\n                unset--;\n                remainingWidth -= col.width;\n                return col.width;\n            }\n            return undefined;\n        });\n        // any unset widths should be calculated.\n        const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;\n        return widths.map((w, i)=>{\n            if (w === undefined) {\n                return Math.max(unsetWidth, _minWidth(row[i]));\n            }\n            return w;\n        });\n    }\n}\nfunction addBorder(col, ts, style) {\n    if (col.border) {\n        if (/[.']-+[.']/.test(ts)) {\n            return \"\";\n        }\n        if (ts.trim().length !== 0) {\n            return style;\n        }\n        return \"  \";\n    }\n    return \"\";\n}\n// calculates the minimum width of\n// a column, based on padding preferences.\nfunction _minWidth(col) {\n    const padding = col.padding || [];\n    const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);\n    if (col.border) {\n        return minWidth + 4;\n    }\n    return minWidth;\n}\nfunction getWindowWidth() {\n    /* istanbul ignore next: depends on terminal */ if (typeof process === \"object\" && process.stdout && process.stdout.columns) {\n        return process.stdout.columns;\n    }\n    return 80;\n}\nfunction alignRight(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    if (strWidth < width) {\n        return \" \".repeat(width - strWidth) + str;\n    }\n    return str;\n}\nfunction alignCenter(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    /* istanbul ignore next */ if (strWidth >= width) {\n        return str;\n    }\n    return \" \".repeat(width - strWidth >> 1) + str;\n}\nlet mixin;\nfunction cliui(opts, _mixin) {\n    mixin = _mixin;\n    return new UI({\n        width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),\n        wrap: opts === null || opts === void 0 ? void 0 : opts.wrap\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cliui/build/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cliui/build/lib/string-utils.js":
/*!******************************************************!*\
  !*** ./node_modules/cliui/build/lib/string-utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stripAnsi: () => (/* binding */ stripAnsi),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n// Minimal replacement for ansi string helpers \"wrap-ansi\" and \"strip-ansi\".\n// to facilitate ESM and Deno modules.\n// TODO: look at porting https://www.npmjs.com/package/wrap-ansi to ESM.\n// The npm application\n// Copyright (c) npm, Inc. and Contributors\n// Licensed on the terms of The Artistic License 2.0\n// See: https://github.com/npm/cli/blob/4c65cd952bc8627811735bea76b9b110cc4fc80e/lib/utils/ansi-trim.js\nconst ansi = new RegExp(\"\\x1b(?:\\\\[(?:\\\\d+[ABCDEFGJKSTm]|\\\\d+;\\\\d+[Hfm]|\" + \"\\\\d+;\\\\d+;\\\\d+m|6n|s|u|\\\\?25[lh])|\\\\w)\", \"g\");\nfunction stripAnsi(str) {\n    return str.replace(ansi, \"\");\n}\nfunction wrap(str, width) {\n    const [start, end] = str.match(ansi) || [\n        \"\",\n        \"\"\n    ];\n    str = stripAnsi(str);\n    let wrapped = \"\";\n    for(let i = 0; i < str.length; i++){\n        if (i !== 0 && i % width === 0) {\n            wrapped += \"\\n\";\n        }\n        wrapped += str.charAt(i);\n    }\n    if (start && end) {\n        wrapped = `${start}${wrapped}${end}`;\n    }\n    return wrapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xpdWkvYnVpbGQvbGliL3N0cmluZy11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRFQUE0RTtBQUM1RSxzQ0FBc0M7QUFDdEMsd0VBQXdFO0FBQ3hFLHNCQUFzQjtBQUN0QiwyQ0FBMkM7QUFDM0Msb0RBQW9EO0FBQ3BELHVHQUF1RztBQUN2RyxNQUFNQSxPQUFPLElBQUlDLE9BQU8sb0RBQ3BCLDBDQUEwQztBQUN2QyxTQUFTQyxVQUFVQyxHQUFHO0lBQ3pCLE9BQU9BLElBQUlDLE9BQU8sQ0FBQ0osTUFBTTtBQUM3QjtBQUNPLFNBQVNLLEtBQUtGLEdBQUcsRUFBRUcsS0FBSztJQUMzQixNQUFNLENBQUNDLE9BQU9DLElBQUksR0FBR0wsSUFBSU0sS0FBSyxDQUFDVCxTQUFTO1FBQUM7UUFBSTtLQUFHO0lBQ2hERyxNQUFNRCxVQUFVQztJQUNoQixJQUFJTyxVQUFVO0lBQ2QsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlSLElBQUlTLE1BQU0sRUFBRUQsSUFBSztRQUNqQyxJQUFJQSxNQUFNLEtBQUssSUFBS0wsVUFBVyxHQUFHO1lBQzlCSSxXQUFXO1FBQ2Y7UUFDQUEsV0FBV1AsSUFBSVUsTUFBTSxDQUFDRjtJQUMxQjtJQUNBLElBQUlKLFNBQVNDLEtBQUs7UUFDZEUsVUFBVSxDQUFDLEVBQUVILE1BQU0sRUFBRUcsUUFBUSxFQUFFRixJQUFJLENBQUM7SUFDeEM7SUFDQSxPQUFPRTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvY2xpdWkvYnVpbGQvbGliL3N0cmluZy11dGlscy5qcz9mMWVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1pbmltYWwgcmVwbGFjZW1lbnQgZm9yIGFuc2kgc3RyaW5nIGhlbHBlcnMgXCJ3cmFwLWFuc2lcIiBhbmQgXCJzdHJpcC1hbnNpXCIuXG4vLyB0byBmYWNpbGl0YXRlIEVTTSBhbmQgRGVubyBtb2R1bGVzLlxuLy8gVE9ETzogbG9vayBhdCBwb3J0aW5nIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dyYXAtYW5zaSB0byBFU00uXG4vLyBUaGUgbnBtIGFwcGxpY2F0aW9uXG4vLyBDb3B5cmlnaHQgKGMpIG5wbSwgSW5jLiBhbmQgQ29udHJpYnV0b3JzXG4vLyBMaWNlbnNlZCBvbiB0aGUgdGVybXMgb2YgVGhlIEFydGlzdGljIExpY2Vuc2UgMi4wXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ucG0vY2xpL2Jsb2IvNGM2NWNkOTUyYmM4NjI3ODExNzM1YmVhNzZiOWIxMTBjYzRmYzgwZS9saWIvdXRpbHMvYW5zaS10cmltLmpzXG5jb25zdCBhbnNpID0gbmV3IFJlZ0V4cCgnXFx4MWIoPzpcXFxcWyg/OlxcXFxkK1tBQkNERUZHSktTVG1dfFxcXFxkKztcXFxcZCtbSGZtXXwnICtcbiAgICAnXFxcXGQrO1xcXFxkKztcXFxcZCttfDZufHN8dXxcXFxcPzI1W2xoXSl8XFxcXHcpJywgJ2cnKTtcbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEFuc2koc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGFuc2ksICcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwKHN0ciwgd2lkdGgpIHtcbiAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSBzdHIubWF0Y2goYW5zaSkgfHwgWycnLCAnJ107XG4gICAgc3RyID0gc3RyaXBBbnNpKHN0cik7XG4gICAgbGV0IHdyYXBwZWQgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSAhPT0gMCAmJiAoaSAlIHdpZHRoKSA9PT0gMCkge1xuICAgICAgICAgICAgd3JhcHBlZCArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgfVxuICAgIGlmIChzdGFydCAmJiBlbmQpIHtcbiAgICAgICAgd3JhcHBlZCA9IGAke3N0YXJ0fSR7d3JhcHBlZH0ke2VuZH1gO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcHBlZDtcbn1cbiJdLCJuYW1lcyI6WyJhbnNpIiwiUmVnRXhwIiwic3RyaXBBbnNpIiwic3RyIiwicmVwbGFjZSIsIndyYXAiLCJ3aWR0aCIsInN0YXJ0IiwiZW5kIiwibWF0Y2giLCJ3cmFwcGVkIiwiaSIsImxlbmd0aCIsImNoYXJBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cliui/build/lib/string-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cliui/index.mjs":
/*!**************************************!*\
  !*** ./node_modules/cliui/index.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ui)\n/* harmony export */ });\n/* harmony import */ var _build_lib_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build/lib/index.js */ \"(rsc)/./node_modules/cliui/build/lib/index.js\");\n/* harmony import */ var _build_lib_string_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./build/lib/string-utils.js */ \"(rsc)/./node_modules/cliui/build/lib/string-utils.js\");\n// Bootstrap cliui with CommonJS dependencies:\n\n\nfunction ui(opts) {\n    return (0,_build_lib_index_js__WEBPACK_IMPORTED_MODULE_0__.cliui)(opts, {\n        stringWidth: (str)=>{\n            return [\n                ...str\n            ].length;\n        },\n        stripAnsi: _build_lib_string_utils_js__WEBPACK_IMPORTED_MODULE_1__.stripAnsi,\n        wrap: _build_lib_string_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrap\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xpdWkvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhDQUE4QztBQUNGO0FBQ2lCO0FBRTlDLFNBQVNHLEdBQUlDLElBQUk7SUFDOUIsT0FBT0osMERBQUtBLENBQUNJLE1BQU07UUFDakJDLGFBQWEsQ0FBQ0M7WUFDWixPQUFPO21CQUFJQTthQUFJLENBQUNDLE1BQU07UUFDeEI7UUFDQUwsU0FBU0EsbUVBQUFBO1FBQ1RELElBQUlBLDhEQUFBQTtJQUNOO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWFwcC8uL25vZGVfbW9kdWxlcy9jbGl1aS9pbmRleC5tanM/OTI0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCb290c3RyYXAgY2xpdWkgd2l0aCBDb21tb25KUyBkZXBlbmRlbmNpZXM6XG5pbXBvcnQgeyBjbGl1aSB9IGZyb20gJy4vYnVpbGQvbGliL2luZGV4LmpzJ1xuaW1wb3J0IHsgd3JhcCwgc3RyaXBBbnNpIH0gZnJvbSAnLi9idWlsZC9saWIvc3RyaW5nLXV0aWxzLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1aSAob3B0cykge1xuICByZXR1cm4gY2xpdWkob3B0cywge1xuICAgIHN0cmluZ1dpZHRoOiAoc3RyKSA9PiB7XG4gICAgICByZXR1cm4gWy4uLnN0cl0ubGVuZ3RoXG4gICAgfSxcbiAgICBzdHJpcEFuc2ksXG4gICAgd3JhcFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImNsaXVpIiwid3JhcCIsInN0cmlwQW5zaSIsInVpIiwib3B0cyIsInN0cmluZ1dpZHRoIiwic3RyIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cliui/index.mjs\n");

/***/ })

};
;